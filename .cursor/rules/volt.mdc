---
alwaysApply: true
globs: *.blade.php
---

# Volt統合ルール

## 1. コンポーネント設計
- Functionalスタイル実装必須
- make:voltコマンドで--functionalオプション使用
- クラスベースコンポーネント禁止
- 単一責任の原則遵守
- コンポーネントの再利用性重視
- 共通コンポーネント配置: resources/views/components

## 2. ルーティング設計
### 基本方針
- フルページコンポーネントはVolt::route()を使用
- 例: `Volt::route('/', 'memos.index')->name('home');`
- 名前付きルート必須
- ルーティングはweb.phpに集約
- ミドルウェアはルート定義時に指定

### コンポーネント配置
- Voltコンポーネント: resources/views/livewire/
- ページコンポーネント: 機能名/アクション名
- 例: memos/index, memos/create, memos/edit

## 3. 状態管理
### 基本方針
- #[Reactive]アトリビュートによる状態管理
- コンポーネント間通信
- イベント使用
- ディスパッチ活用
- 複雑なロジックはActionクラスに分離

### 状態管理選択基準
#### withの使用
- 読み取り専用データ表示
- シンプルなページネーション
- 状態変更不要
- パフォーマンス重視

#### stateの使用
- フォーム入力あり
- 双方向バインディング必要
- データ更新あり
- 複雑な状態管理

## 4. フォーム実装
### バリデーション
- Voltバリデーション機能使用
- Form Requests実装
- リアルタイム検証
- 日本語エラーメッセージ
- インライン検証

### セキュリティ
- CSRFトークン自動付与
- 二重送信防止
- XSS対策
- 入力値サニタイズ
- 認可制御

### UX対応
- ローディング表示
- エラー表示最適化
- アクセシビリティ確保
- フィードバック表示

## 5. UI/UX
- TailwindCSSによるスタイリング
- レスポンシブデザイン必須
- アクセシビリティガイドライン遵守
- インタラクティブUI実装
- Voltのリアクティブ機能活用
- 適切なローディング状態管理

## 6. パフォーマンス
- コンポーネントの最適な粒度設計
- 不要な再レンダリング防止
- computedプロパティ活用
- キャッシュ戦略実装
- N+1問題回避
- アセット最適化

## 7. テスト
- コンポーネント単体テスト
- インタラクションテスト
- E2Eテスト実装
- テストカバレッジ確保
